package org.mentha.utils.archimate.model.nodes.dsl

import org.mentha.utils.archimate.model._
import org.mentha.utils.archimate.model.nodes._
import org.mentha.utils.archimate.model.nodes.impl._
import org.mentha.utils.archimate.model.edges._
import org.mentha.utils.archimate.model.edges.impl._

@javax.annotation.Generated(Array("org.mentha.utils.archimate.model.generator$"))
object Composition {

  implicit class ImplicitGrouping(src: Grouping)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationCollaboration): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationComponent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Artifact): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Assessment): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessActor): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessCollaboration): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessRole): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Capability): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: CommunicationNetwork): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Constraint): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Contract): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: CourseOfAction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: DataObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Deliverable): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Device): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: DistributionNetwork): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Driver): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Equipment): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Facility): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Gap): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Goal): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ImplementationEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Location): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Material): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Meaning): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Node): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Outcome): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Path): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Plateau): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Principle): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Product): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Relationship): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Representation): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Requirement): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Resource): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Stakeholder): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: SystemSoftware): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyCollaboration): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Value): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: WorkPackage): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationCollaboration): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationComponent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Artifact): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Assessment): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessActor): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessCollaboration): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessRole): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Capability): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: CommunicationNetwork): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Constraint): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Contract): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: CourseOfAction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: DataObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Deliverable): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Device): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: DistributionNetwork): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Driver): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Equipment): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Facility): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Gap): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Goal): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ImplementationEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Location): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Material): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Meaning): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Node): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Outcome): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Path): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Plateau): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Principle): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Product): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Relationship): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Representation): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Requirement): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Resource): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Stakeholder): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: SystemSoftware): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyCollaboration): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Value): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: WorkPackage): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Capability): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: CourseOfAction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationCollaboration): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationComponent): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationEvent): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationFunction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationInteraction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationInterface): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationProcess): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ApplicationService): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Artifact): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Assessment): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessActor): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessCollaboration): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessEvent): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessFunction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessInteraction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessInterface): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessObject): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessProcess): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessRole): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessService): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Capability): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: CommunicationNetwork): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Constraint): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Contract): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: CourseOfAction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: DataObject): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Deliverable): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Device): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: DistributionNetwork): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Driver): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Equipment): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Facility): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Gap): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Goal): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: ImplementationEvent): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Location): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Material): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Meaning): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Node): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Outcome): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Path): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Plateau): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Principle): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Product): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Representation): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Requirement): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Resource): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Stakeholder): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: SystemSoftware): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyCollaboration): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyEvent): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyFunction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyInteraction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyInterface): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyProcess): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyService): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Value): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: WorkPackage): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Deliverable): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Capability): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CourseOfAction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ImplementationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Plateau): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Resource): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: WorkPackage): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Capability): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CourseOfAction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ImplementationEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Resource): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: WorkPackage): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned-to`(dst: Junction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Artifact): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessActor): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessInterface): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessRole): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Capability): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Device): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Equipment): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Facility): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Grouping): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ImplementationEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Material): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Node): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Stakeholder): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: SystemSoftware): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyCollaboration): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyInterface): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: WorkPackage): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Deliverable): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationCollaboration): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationComponent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Artifact): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessActor): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessCollaboration): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessObject): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessRole): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CommunicationNetwork): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Contract): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: DataObject): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Deliverable): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Device): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: DistributionNetwork): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Equipment): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Facility): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Location): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Material): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Node): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Path): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Plateau): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Product): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Representation): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Stakeholder): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: SystemSoftware): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyCollaboration): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyService): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Deliverable): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitLocation(src: Location)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationCollaboration): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationComponent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Artifact): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Assessment): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessActor): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessCollaboration): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessRole): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Capability): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: CommunicationNetwork): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Constraint): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Contract): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: CourseOfAction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: DataObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Deliverable): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Device): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: DistributionNetwork): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Driver): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Equipment): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Facility): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Gap): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Goal): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ImplementationEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Location): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Material): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Meaning): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Node): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Outcome): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Path): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Plateau): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Principle): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Product): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Relationship): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Representation): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Requirement): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Resource): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Stakeholder): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: SystemSoftware): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyCollaboration): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Value): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: WorkPackage): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationCollaboration): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationComponent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Artifact): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Assessment): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessActor): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessCollaboration): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessRole): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Capability): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: CommunicationNetwork): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Constraint): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Contract): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: CourseOfAction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: DataObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Deliverable): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Device): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: DistributionNetwork): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Driver): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Equipment): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Facility): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Gap): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Goal): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ImplementationEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Location): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Material): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Meaning): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Node): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Outcome): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Path): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Plateau): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Principle): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Product): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Relationship): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Representation): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Requirement): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Resource): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Stakeholder): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: SystemSoftware): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyCollaboration): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Value): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: WorkPackage): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Location): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned-to`(dst: Junction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: ApplicationService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessActor): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessInterface): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessRole): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Device): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Equipment): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Facility): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Grouping): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Node): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: SystemSoftware): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyCollaboration): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyInterface): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyService): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationCollaboration): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationComponent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessActor): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessRole): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Device): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Equipment): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Facility): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Node): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Path): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Stakeholder): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: SystemSoftware): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyCollaboration): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyService): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }
}
