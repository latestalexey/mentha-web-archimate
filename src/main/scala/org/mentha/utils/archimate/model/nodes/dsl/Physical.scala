package org.mentha.utils.archimate.model.nodes.dsl

import org.mentha.utils.archimate.model._
import org.mentha.utils.archimate.model.nodes._
import org.mentha.utils.archimate.model.nodes.impl._
import org.mentha.utils.archimate.model.edges._

@javax.annotation.Generated(Array("org.mentha.utils.archimate.model.generator$"))
object Physical {

  implicit class ImplicitEquipment(src: Equipment) {
    def `composes`(dst: Device)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Equipment)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Facility)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Node)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: SystemSoftware)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyCollaboration)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyInterface)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Device)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Equipment)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Facility)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Node)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: SystemSoftware)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyCollaboration)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    @derived def `aggregates`(dst: TechnologyInterface)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Grouping)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationComponent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessActor)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessRole)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Device)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Equipment)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Facility)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Node)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: SystemSoftware)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Device)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Equipment)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Facility)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Node)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: SystemSoftware)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyCollaboration)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Grouping)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Artifact)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Contract)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: DataObject)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Material)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Representation)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Grouping)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationComponent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessActor)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessRole)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: CommunicationNetwork)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Device)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: DistributionNetwork)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Equipment)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Facility)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Location)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Node)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Path)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: SystemSoftware)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Grouping)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationComponent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessActor)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessRole)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: CommunicationNetwork)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Device)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: DistributionNetwork)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Equipment)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Facility)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Location)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Node)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Path)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Product)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: SystemSoftware)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned-to`(dst: Artifact)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Grouping)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Material)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyEvent)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyFunction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyInteraction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyProcess)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessActor)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessEvent)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessFunction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessInteraction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessInterface)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessProcess)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessRole)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessService)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Device)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Equipment)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Facility)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Node)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: SystemSoftware)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyCollaboration)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyInterface)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyService)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Constraint)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Assessment)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Driver)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Goal)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Meaning)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Outcome)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Principle)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Value)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Grouping)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Artifact)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Contract)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: DataObject)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Material)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Representation)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Constraint)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Device)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Equipment)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Facility)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Node)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: SystemSoftware)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyCollaboration)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationCollaboration)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationComponent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessActor)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessRole)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Capability)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: CourseOfAction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Goal)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Outcome)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Principle)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Grouping)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Artifact)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Contract)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: DataObject)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Material)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Representation)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitFacility(src: Facility) {
    def `composes`(dst: Device)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Equipment)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Facility)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Node)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: SystemSoftware)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyCollaboration)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyInterface)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Device)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Equipment)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Facility)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Node)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: SystemSoftware)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyCollaboration)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    @derived def `aggregates`(dst: TechnologyInterface)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Grouping)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationComponent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessActor)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessRole)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Device)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Equipment)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Facility)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Node)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: SystemSoftware)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Device)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Equipment)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Facility)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Node)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: SystemSoftware)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: TechnologyCollaboration)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Grouping)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Artifact)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Contract)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: DataObject)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Material)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Representation)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Grouping)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationComponent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessActor)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessRole)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: CommunicationNetwork)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Device)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: DistributionNetwork)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Equipment)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Facility)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Location)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Node)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Path)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: SystemSoftware)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Grouping)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationComponent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessActor)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessRole)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: CommunicationNetwork)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Device)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: DistributionNetwork)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Equipment)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Facility)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Location)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Node)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Path)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Product)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: SystemSoftware)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned-to`(dst: Artifact)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: BusinessActor)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Device)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Equipment)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Facility)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Grouping)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: Node)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: SystemSoftware)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyCollaboration)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyEvent)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyFunction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyInteraction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned-to`(dst: TechnologyProcess)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessEvent)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessFunction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessInteraction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessInterface)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessProcess)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessRole)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessService)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyInterface)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyService)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Constraint)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Assessment)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Driver)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Goal)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Meaning)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Outcome)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Principle)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Value)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Grouping)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Artifact)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Contract)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: DataObject)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Material)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Representation)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Constraint)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Device)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Equipment)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Facility)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Node)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: SystemSoftware)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyCollaboration)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationCollaboration)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationComponent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessActor)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessRole)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Capability)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: CourseOfAction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Goal)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Outcome)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Principle)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Grouping)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Artifact)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Contract)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: DataObject)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Material)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Representation)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitDistributionNetwork(src: DistributionNetwork) {
    def `composes`(dst: DistributionNetwork)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: DistributionNetwork)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Equipment)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Facility)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    @derived def `aggregates`(dst: Device)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    @derived def `aggregates`(dst: Node)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    @derived def `aggregates`(dst: SystemSoftware)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    @derived def `aggregates`(dst: TechnologyCollaboration)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    @derived def `aggregates`(dst: TechnologyInterface)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Grouping)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationComponent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: ApplicationService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessActor)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessRole)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: BusinessService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Device)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Equipment)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Facility)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: Node)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: SystemSoftware)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyCollaboration)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyEvent)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyFunction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyInteraction)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyInterface)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyProcess)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)
    @derived def `serves`(dst: TechnologyService)(implicit model: Model): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: DistributionNetwork)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Grouping)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Artifact)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Contract)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: DataObject)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Material)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
      @derived def `of`(dst: Representation)(implicit model: Model): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Grouping)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationComponent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: ApplicationService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessActor)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessRole)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: BusinessService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: CommunicationNetwork)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Device)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: DistributionNetwork)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Equipment)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Facility)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Location)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Node)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: Path)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: SystemSoftware)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyCollaboration)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyEvent)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyFunction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyInteraction)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyInterface)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyProcess)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)
    @derived def `triggers`(dst: TechnologyService)(implicit model: Model): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Grouping)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationComponent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: ApplicationService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessActor)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessRole)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: BusinessService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: CommunicationNetwork)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Device)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: DistributionNetwork)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Equipment)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Facility)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Location)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Node)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Path)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: Product)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: SystemSoftware)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyCollaboration)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyEvent)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyFunction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyInteraction)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyInterface)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyProcess)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
      @derived def `to`(dst: TechnologyService)(implicit model: Model): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned-to`(dst: Grouping)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessActor)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessEvent)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessFunction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessInteraction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessInterface)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessProcess)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessRole)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: BusinessService)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Device)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Equipment)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Facility)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: Node)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: SystemSoftware)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyCollaboration)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyEvent)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyFunction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyInteraction)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyInterface)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyProcess)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)
    @derived def `assigned-to`(dst: TechnologyService)(implicit model: Model): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Constraint)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Assessment)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Driver)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Goal)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Meaning)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Outcome)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Principle)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Value)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Grouping)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Artifact)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Contract)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: DataObject)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Material)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)
    @derived def `reads`(dst: Representation)(implicit model: Model): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Constraint)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Path)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationCollaboration)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationComponent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: ApplicationService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessActor)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessRole)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: BusinessService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Capability)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: CourseOfAction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Device)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Equipment)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Facility)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Goal)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Node)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Outcome)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Principle)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: SystemSoftware)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyCollaboration)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyEvent)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyFunction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyInteraction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyInterface)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyProcess)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: TechnologyService)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Grouping)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Artifact)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: BusinessObject)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Contract)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: DataObject)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Material)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)
    @derived def `writes`(dst: Representation)(implicit model: Model): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitMaterial(src: Material) {
    def `composes`(dst: Grouping)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Material)(implicit model: Model): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Grouping)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Material)(implicit model: Model): AggregationRelationship = _aggregates(src, dst)(model)

    def `specializes`(dst: Grouping)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Material)(implicit model: Model): SpecializationRelationship = _specializes(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Constraint)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Assessment)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Driver)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Goal)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Meaning)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Outcome)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Principle)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      @derived def `in`(dst: Value)(implicit model: Model): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `realizes`(dst: BusinessObject)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Contract)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Capability)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: CourseOfAction)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Goal)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Outcome)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)
    @derived def `realizes`(dst: Principle)(implicit model: Model): RealizationRelationship = _realizes(src, dst)(model)

  }
}
