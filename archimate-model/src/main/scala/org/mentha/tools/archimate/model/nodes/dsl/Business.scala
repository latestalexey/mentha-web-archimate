package org.mentha.tools.archimate.model.nodes.dsl

import org.mentha.tools.archimate.model._
import org.mentha.tools.archimate.model.nodes._
import org.mentha.tools.archimate.model.nodes.impl._
import org.mentha.tools.archimate.model.edges._
import org.mentha.tools.archimate.model.edges.impl._

@javax.annotation.Generated(Array("org.mentha.tools.archimate.model.generator$"))
object Business {

  implicit class ImplicitBusinessActor(src: BusinessActor)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessActor): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessActor): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessActor): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned to`(dst: Junction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessInterface): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessRole): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: Grouping): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: Stakeholder): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessRole(src: BusinessRole)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessRole): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessRole): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessRole): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned to`(dst: Junction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: Grouping): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: ImplementationEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: WorkPackage): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessCollaboration(src: BusinessCollaboration)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessCollaboration): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessActor): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessCollaboration): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessRole): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessCollaboration): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned to`(dst: Junction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessEvent): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessFunction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessInteraction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessInterface): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessProcess): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessRole): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: Grouping): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessInterface(src: BusinessInterface)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInterface): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInterface): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessInterface): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `assigned to`(dst: Junction): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: BusinessService): AssignmentRelationship = _assigned_to(src, dst)(model)
    def `assigned to`(dst: Grouping): AssignmentRelationship = _assigned_to(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessProcess(src: BusinessProcess)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessProcess): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessFunction(src: BusinessFunction)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessFunction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessInteraction(src: BusinessInteraction)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessFunction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessInteraction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessProcess): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessFunction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessInteraction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessProcess): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessInteraction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessEvent(src: BusinessEvent)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessEvent): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessEvent): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessEvent): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessService(src: BusinessService)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessService): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `triggers`(dst: Junction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationComponent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: ApplicationService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessActor): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessRole): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: BusinessService): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: CommunicationNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Device): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: DistributionNetwork): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Equipment): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Facility): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Grouping): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Location): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Node): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: Path): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: SystemSoftware): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyCollaboration): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyEvent): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyFunction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInteraction): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyInterface): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyProcess): TriggeringRelationship = _triggers(src, dst)(model)
    def `triggers`(dst: TechnologyService): TriggeringRelationship = _triggers(src, dst)(model)

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }

  implicit class ImplicitBusinessObject(src: BusinessObject)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Contract): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Contract): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessObject): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Contract): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)

  }

  implicit class ImplicitContract(src: Contract)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Contract): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Contract): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: BusinessObject): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Contract): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)

  }

  implicit class ImplicitRepresentation(src: Representation)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Representation): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Representation): AggregationRelationship = _aggregates(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Representation): SpecializationRelationship = _specializes(src, dst)(model)

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessObject): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Contract): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)

  }

  implicit class ImplicitProduct(src: Product)(implicit val model: Model) {

    def `associated with`(dst: Concept): AssociationRelationship = _associated_with(src, dst)(model)

    def `composes`(dst: Junction): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: ApplicationService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Artifact): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: BusinessService): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Contract): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: DataObject): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Grouping): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Material): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Product): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: Representation): CompositionRelationship = _composes(src, dst)(model)
    def `composes`(dst: TechnologyService): CompositionRelationship = _composes(src, dst)(model)

    def `aggregates`(dst: Junction): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: ApplicationService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Artifact): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: BusinessService): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Contract): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: DataObject): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Grouping): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Material): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Product): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: Representation): AggregationRelationship = _aggregates(src, dst)(model)
    def `aggregates`(dst: TechnologyService): AggregationRelationship = _aggregates(src, dst)(model)

    def `serves`(dst: Junction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationComponent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: ApplicationService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessActor): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessRole): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: BusinessService): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Device): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Equipment): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Facility): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Grouping): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: Node): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: SystemSoftware): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyCollaboration): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyEvent): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyFunction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInteraction): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyInterface): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyProcess): ServingRelationship = _serves(src, dst)(model)
    def `serves`(dst: TechnologyService): ServingRelationship = _serves(src, dst)(model)

    def `specializes`(dst: Junction): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Grouping): SpecializationRelationship = _specializes(src, dst)(model)
    def `specializes`(dst: Product): SpecializationRelationship = _specializes(src, dst)(model)

    def `accesses`($0: AccessType) = new {
      def `of`(dst: Junction): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Artifact): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: BusinessObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Contract): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: DataObject): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Grouping): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Material): AccessRelationship = _accesses_of(src, dst)($0)(model)
      def `of`(dst: Representation): AccessRelationship = _accesses_of(src, dst)($0)(model)
    }

    def `flows`($0: String) = new {
      def `to`(dst: Junction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationComponent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: ApplicationService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessActor): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessRole): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: BusinessService): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: CommunicationNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Device): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: DistributionNetwork): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Equipment): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Facility): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Grouping): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Location): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Node): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Path): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: Product): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: SystemSoftware): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyCollaboration): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyEvent): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyFunction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInteraction): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyInterface): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyProcess): FlowRelationship = _flows_to(src, dst)($0)(model)
      def `to`(dst: TechnologyService): FlowRelationship = _flows_to(src, dst)($0)(model)
    }

    def `influences`($0: String) = new {
      def `in`(dst: Junction): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Assessment): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Constraint): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Driver): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Goal): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Grouping): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Meaning): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Outcome): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Principle): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Requirement): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Stakeholder): InfluenceRelationship = _influences_in(src, dst)($0)(model)
      def `in`(dst: Value): InfluenceRelationship = _influences_in(src, dst)($0)(model)
    }

    def `reads`(dst: Junction): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Artifact): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: BusinessObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Contract): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: DataObject): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Grouping): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Material): AccessRelationship = _reads(src, dst)(model)
    def `reads`(dst: Representation): AccessRelationship = _reads(src, dst)(model)

    def `realizes`(dst: Junction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationCollaboration): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationComponent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: ApplicationService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessActor): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessRole): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: BusinessService): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Capability): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Constraint): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: CourseOfAction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Device): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Equipment): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Facility): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Goal): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Grouping): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Node): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Outcome): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Principle): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Requirement): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Resource): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: Stakeholder): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: SystemSoftware): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyCollaboration): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyEvent): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyFunction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyInteraction): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyInterface): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyProcess): RealizationRelationship = _realizes(src, dst)(model)
    def `realizes`(dst: TechnologyService): RealizationRelationship = _realizes(src, dst)(model)

    def `writes`(dst: Junction): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Artifact): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: BusinessObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Contract): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: DataObject): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Grouping): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Material): AccessRelationship = _writes(src, dst)(model)
    def `writes`(dst: Representation): AccessRelationship = _writes(src, dst)(model)

  }
}
